{"version":3,"sources":["components/SearchBar.js","components/Gif.js","components/GifList.js","components/App.js","reportWebVitals.js","index.js"],"names":["SearchBar","handleUpdate","event","props","searchFunction","target","value","className","type","placeholder","onChange","this","React","Component","Gif","handleClick","selectGif","id","src","onClick","GifList","gifs","map","gif","GIPHY_API_KEY","customStyles","content","top","left","right","bottom","transform","padding","closeModal","position","Modal","setAppElement","App","search","query","giphy","apiKey","https","q","rating","limit","err","result","console","log","data","setState","selectedGifId","state","showModal","gifsOffset","handleOpenModal","bind","handleCloseModal","infiniteScroll","loadFeed","window","addEventListener","removeEventListener","trending","offset","then","response","forEach","newArray","slice","push","length","catch","innerHeight","scrollY","document","body","scrollHeight","scrollFeed","isOpen","onRequestClose","style","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.e1ca4d71.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nclass SearchBar extends React.Component {\r\n  handleUpdate = (event) => {\r\n    this.props.searchFunction(event.target.value);\r\n  }\r\n\r\n  render() {\r\n    return (\r\n        <>\r\n            <div className=\"ui search\">\r\n                <div className=\"ui icon input\" >\r\n                    <input className=\"prompt\" type=\"text\" placeholder=\"Search GIFs\" onChange={this.handleUpdate} />\r\n                    <i className=\"search icon\"></i>\r\n                </div>\r\n            </div>\r\n        </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default SearchBar;","import React from 'react';\r\n\r\nclass Gif extends React.Component {\r\n  handleClick = () => {\r\n    if (this.props.selectGif) {\r\n      this.props.selectGif(this.props.id);\r\n    }\r\n  }\r\n\r\n  render() {\r\n    const src = `https://media2.giphy.com/media/${this.props.id}/200.gif`;\r\n    return (\r\n        <div className=\"blup\">\r\n            <img src={src} onClick={this.handleClick} />\r\n        </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Gif;","import React from 'react';\r\nimport Gif from './Gif';\r\n\r\nconst GifList = (props) => {\r\n  return (\r\n    <div className=\"gif\">\r\n      {props.gifs.map(gif => <Gif id={gif.id} key={gif.id} selectGif={props.selectGif} />)}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default GifList;","import '../App.css'\nimport React from 'react';\nimport giphy from 'giphy-api';\nimport Modal from 'react-modal';\n\nimport SearchBar from './SearchBar';\nimport Gif from './Gif';\nimport GifList from './GifList';\n\nconst GIPHY_API_KEY = 'kq5n8Zqqda7uRu59qZJZT56pZq8xqJ5I';\n\nconst customStyles = {\n  content : {\n    top                   : '50%',\n    left                  : '50%',\n    right                 : 'auto',\n    bottom                : 'auto',\n    transform             : 'translate(-45%, -45%)',\n    padding               : '0'\n  }\n};\n\nconst closeModal = {\n  position: 'absolute',\n  top: 6,\n  right: 6,\n}\nModal.setAppElement('#root')\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      gifs: [],\n      selectedGifId: null,\n      showModal: false,\n      gifsOffset: 0\n    };\n    this.handleOpenModal = this.handleOpenModal.bind(this);\n    this.handleCloseModal = this.handleCloseModal.bind(this);\n    this.infiniteScroll = this.infiniteScroll.bind(this);\n  }\n\n  componentWillMount() {\n    // Loading Giphs' feed\n    this.loadFeed();\n}\n\ncomponentDidMount() {\n    window.addEventListener('scroll', this.infiniteScroll);\n}\n\ncomponentWillUnmount() {\n    window.removeEventListener('scroll', this.infiniteScroll);\n}\n\n\nscrollFeed() {\n  this.setState({\n      gifsOffset: this.state.gifsOffset + 12,\n  });\n  this.loadFeed();\n}\n\nloadFeed() {\n  giphy({ apiKey: GIPHY_API_KEY, https: true })\n  .trending({\n     offset: this.state.gifsOffset,\n     limit: 12\n     }).then((response) => {\n      response.data.forEach((gif) => {\n          let newArray = this.state.gifs.slice();\n          newArray.push(gif);\n          console.log(newArray.length)\n          this.setState({\n              gifs: newArray\n            });\n          })\n      })\n      .catch((err) => {\n          // Maybe Alert Danger\n      })\n}\n\ninfiniteScroll() {\n  // Check if close to the end of the page\n  if ((window.innerHeight + window.scrollY) < (document.body.scrollHeight - 600))\n      return;\n      this.scrollFeed();\n}\n\n  search = (query) => {\n    giphy({ apiKey: GIPHY_API_KEY, https: true })\n      .search({\n        q: query,\n        rating: 'g',\n        limit: 12,\n      }, (err, result) => {\n        console.log(result.data)\n        this.setState({\n          gifs: [],\n          gifs: result.data\n        });\n      });\n  }\n\n  selectGif = (id) => {\n    this.setState({\n      selectedGifId: id\n    });\n  }\n\n  handleOpenModal () {\n    this.setState({ showModal: true});\n  }\n\n  handleCloseModal () {\n    this.setState({ showModal: false});\n  }\n\n  render() {\n    return (\n      <>  \n            <SearchBar className=\"search-bar\" searchFunction={this.search} />\n            <div className=\"container\">\n              <Modal \n                isOpen={this.state.showModal}\n                onRequestClose={this.handleCloseModal}\n                style={customStyles}\n              >\n                <button onClick={this.handleCloseModal} style={closeModal}>X</button>\n                <Gif id={this.state.selectedGifId} className=\"gif\" />\n              </Modal>\n                <div onClick={this.handleOpenModal}> <GifList gifs={this.state.gifs} selectGif={this.selectGif} /> </div>\n          </div>\n      </>\n    );\n  }\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}